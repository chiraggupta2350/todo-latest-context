{"version":3,"sources":["components/contextapi.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["contextDefaultValues","input","Items","ItemData","InputData","deleteItem","editTodo","toggleSubmit","Contextvalue","createContext","ContextProvider","children","useState","setInput","setItems","settoggleSubmit","isEditItem","setisEditItem","Provider","value","e","target","i","remainingtodo","filter","elem","id","map","data","includeId","Date","getTime","toString","alert","editItem","find","Todos","useContext","className","type","onChange","onClick","itemval","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"qNAGMA,EAAkC,CACpCC,MAAM,GACNC,MAAM,GACNC,SAAS,aACTC,UAAW,aACXC,WAAW,aACXC,SAAS,aACTC,cAAa,GAGJC,EAAeC,wBAAyBT,GAwDtCU,EAtDY,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACzB,EAAyBC,mBAAiB,IAA1C,mBAAOX,EAAP,KAAaY,EAAb,KACA,EAAyBD,mBAAgB,IAAzC,mBAAOV,EAAP,KAAaY,EAAb,KACA,EAAuCF,oBAAS,GAAhD,mBAAOL,EAAP,KAAoBQ,EAApB,KACA,EAAmCH,mBAAS,MAA5C,mBAAOI,EAAP,KAAkBC,EAAlB,KA2CA,OACI,cAACT,EAAaU,SAAd,CAAuBC,MAAO,CAACjB,QAAMK,eAAaH,UA3CpC,SAACgB,GACjBP,EAASO,EAAEC,OAAOF,QA0C4Cd,WAhB7C,SAACiB,GAChB,IAAMC,EAAgBrB,EAAMsB,QAAO,SAACC,GAClC,OAAOA,EAAKC,KAAOJ,KAErBR,EAASS,IAY8DpB,SAxC1D,WACd,GAAIF,EAGC,GAAGA,IAAUM,EAChBO,EACGZ,EAAMyB,KAAI,SAACF,GACR,OAAGA,EAAKC,KAAOV,EACL,2BAAIS,GAAX,IAAgBG,KAAK3B,IAEjBwB,MAIbV,GAAgB,GAChBF,EAAS,IACTI,EAAc,UAEZ,CACJ,IAAMY,EAAY,CAAEH,IAAI,IAAII,MAAOC,UAAUC,WAAWJ,KAAK3B,GAC7Da,EAAS,GAAD,mBAAKZ,GAAL,CAAW2B,KACnBhB,EAAS,SAnBNoB,MAAM,wBAsCwE3B,SATnE,SAACgB,GACf,IAAMY,EAAWhC,EAAMiC,MAAK,SAACV,GAC1B,OAAOA,EAAKC,KAAOJ,KAEtBP,GAAgB,GAChBF,EAASqB,EAASN,MAClBX,EAAcK,IAG4ErB,SAAzF,SACCU,KC5DHyB,EAAQ,WACb,MAA0EC,qBAAW7B,GAA9EN,EAAP,EAAOA,MAAME,EAAb,EAAaA,UAAUG,EAAvB,EAAuBA,aAAaF,EAApC,EAAoCA,WAAWF,EAA/C,EAA+CA,SAASG,EAAxD,EAAwDA,SAASL,EAAjE,EAAiEA,MAChE,OACE,qCACA,sBAAKqC,UAAU,SAAf,UACE,uBAAQC,KAAO,OAAOpB,MAAOlB,EAAOuC,SAAU,SAACpB,GAAKhB,EAAUgB,MAE5Db,EAAa,mBAAG+B,UAAU,qBAAqBG,QAAS,WAAKtC,OAC7D,mBAAGmC,UAAU,kBAAmBG,QAAS,WAAKtC,UAGlD,qBAAKmC,UAAU,SAAf,SACE,6BACEpC,EAAMyB,KAAI,SAACe,GAEV,OADAC,QAAQC,IAAI1C,GACL,+BAAsBwC,EAAQd,KAAK,mBAAGU,UAAU,uBAAuBG,QAAS,kBAAIpC,EAAWqC,EAAQhB,OAC7G,mBAAGY,UAAU,kBAAkBG,QAAS,kBAAInC,EAASoC,EAAQhB,SAD9CgB,EAAQhB,eASlB,oBACb,cAAC,EAAD,UACE,cAAC,EAAD,OChBWmB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAD,MAEFC,SAASC,eAAe,SAM1Bd,M","file":"static/js/main.7eac7545.chunk.js","sourcesContent":["import React,{createContext, FC, useState} from 'react'\r\nimport { TodosType } from './types';\r\n\r\nconst contextDefaultValues:TodosType  = {\r\n    input:\"\",\r\n    Items:[],\r\n    ItemData:() =>{},\r\n    InputData: () => {},\r\n    deleteItem:() => {},\r\n    editTodo:()=>{},\r\n    toggleSubmit:true\r\n  };\r\n\r\nexport const Contextvalue = createContext<TodosType>(contextDefaultValues)\r\n\r\nconst ContextProvider :FC =({children}) => {\r\n    const [input,setInput] = useState<string>(\"\");\r\n    const [Items,setItems] = useState<any[]>([])\r\n    const [toggleSubmit,settoggleSubmit] = useState(true)\r\n    const [isEditItem,setisEditItem] = useState(null)\r\n    const InputData = (e:any) =>{\r\n      setInput(e.target.value)\r\n    }\r\n    const ItemData = () =>{\r\n       if(!input){\r\n          alert(\"plz filled the data\")\r\n       }\r\n       else if(input && !toggleSubmit){\r\n         setItems(\r\n            Items.map((elem)=>{\r\n               if(elem.id === isEditItem ){\r\n                  return {...elem,data:input}\r\n               }\r\n               return elem\r\n            })\r\n            \r\n         )\r\n         settoggleSubmit(true)\r\n         setInput(\"\")\r\n         setisEditItem(null)\r\n       }\r\n       else{\r\n       const includeId = { id :new Date().getTime().toString(),data:input}\r\n       setItems([...Items,includeId])\r\n       setInput(\"\")\r\n    }\r\n   }\r\n    const deleteItem = (i:any) =>{\r\n        const remainingtodo = Items.filter((elem)=>{\r\n          return elem.id !== i\r\n        })\r\n        setItems(remainingtodo)\r\n     }\r\n\r\n    const editTodo = (i:any) =>{\r\n       const editItem = Items.find((elem)=>{\r\n          return elem.id === i \r\n       })\r\n       settoggleSubmit(false)\r\n       setInput(editItem.data)\r\n       setisEditItem(i)\r\n    }\r\n    return (\r\n        <Contextvalue.Provider value={{Items,toggleSubmit,InputData,deleteItem,ItemData,editTodo,input}}>\r\n        {children}\r\n        </Contextvalue.Provider>\r\n    )\r\n}\r\n\r\nexport default ContextProvider\r\n","import React, { useContext } from 'react'\nimport \"./index\"\nimport ContextProvider, { Contextvalue } from './components/contextapi'\n\nconst Todos = () => {\n const {Items,InputData,toggleSubmit,deleteItem,ItemData,editTodo,input} = useContext(Contextvalue)\n  return (\n    <>\n    <div className=\"center\">\n      <input  type = \"text\" value={input} onChange={(e)=>{InputData(e)}}/>\n      {\n        toggleSubmit?<i className=\"fa fa-plus add-btn\" onClick={()=>{ItemData()}}></i>:\n        <i className=\"far fa-edit btn\"  onClick={()=>{ItemData()}}  ></i>\n      }\n    </div>\n    <div className=\"center\">\n      <ol>\n       {Items.map((itemval)=>{\n         console.log(Items)\n         return <li key={itemval.id}>{itemval.data}<i className=\"far fa-trash-alt btn\" onClick={()=>deleteItem(itemval.id)}></i>\n          <i className=\"far fa-edit btn\" onClick={()=>editTodo(itemval.id)}></i></li> \n       })}\n       </ol>\n    </div>\n    </>\n  )\n}\n\nexport default () => (\n  <ContextProvider>\n    <Todos />\n  </ContextProvider>\n);\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}